#include <stdio.h>
#include <stdlib.h>
#include <string.h>

typedef struct {
    char process_ID;
    int arrival_Time;
    int priority_Num;
}process_info;

typedef struct Node {
    int burst_Time;
    process_info info;
    struct Node *link;
}nodeType, *nodePtr;

typedef struct {
    nodePtr FRONT;
    nodePtr BACK;
}QUEUE;

void DisplayTable(nodePtr L);
void AddInQueue(QUEUE *Q, nodeType elem);

int main()
{
    QUEUE queue = {NULL, NULL};
    int input = 1, x;
    char pID = 'A';
    nodeType elem;
    elem.info.priority_Num = 0;
    elem.info.process_ID = pID;

    elem.burst_Time = 5;
    elem.info.arrival_Time = 4;
    AddInQueue(&queue, elem);
    DisplayTable(queue.BACK);
    ++pID;

    elem.burst_Time = 7;
    elem.info.arrival_Time = 3;
    elem.info.process_ID = pID;
    AddInQueue(&queue, elem);
    DisplayTable(queue.BACK);
    ++pID;

    elem.burst_Time = 7;
    elem.info.arrival_Time = 9;
    elem.info.process_ID = pID;
    AddInQueue(&queue, elem);
    DisplayTable(queue.FRONT);
    ++pID;

    elem.burst_Time = 7;
    elem.info.arrival_Time = 6;
    elem.info.process_ID = pID;
    AddInQueue(&queue, elem);
    DisplayTable(queue.BACK);
    ++pID;

    elem.burst_Time = 7;
    elem.info.arrival_Time = 1;
    elem.info.process_ID = pID;
    AddInQueue(&queue, elem);
    DisplayTable(queue.BACK);
    ++pID;

    elem.burst_Time = 7;
    elem.info.arrival_Time = 3;
    elem.info.process_ID = pID;
    AddInQueue(&queue, elem);
    DisplayTable(queue.BACK);
    ++pID;

    elem.burst_Time = 20;
    elem.info.arrival_Time = 3;
    elem.info.process_ID = pID;
    AddInQueue(&queue, elem);
    DisplayTable(queue.BACK);
    ++pID;

    return 0;
}

void DisplayTable(nodePtr L) {
    // Print table headers
    printf("+------------+--------------+------------+\n");
    printf("| Process ID | Arrival Time | Burst Time |\n");
    printf("+------------+--------------+------------+\n");

    // Iterate through the linked list and print each node's data
    while (L != NULL) {
        printf("| %-10c | %-12d | %-10d |\n",
               L->info.process_ID,
               L->info.arrival_Time,
               L->burst_Time);
        
        // Move to the next node
        L = L->link;
    }

    // Print bottom border of the table
    printf("+------------+--------------+------------+\n");
}

void AddInQueue(QUEUE *Q, nodeType elem) {
    nodePtr newProcess = (nodePtr)malloc(sizeof(struct Node));

    if (newProcess != NULL) {
        newProcess->burst_Time = elem.burst_Time;
        newProcess->info = elem.info;
        newProcess->link = NULL;

        if (Q->BACK == NULL) {
            Q->FRONT = newProcess;
            Q->BACK = newProcess;
        } else {
            nodePtr *trav, temp;

            for (trav = &(Q->BACK); (*trav)->link != NULL && (*trav)->info.arrival_Time > elem.info.arrival_Time; trav = &(*trav)->link) {}
            
            if ((*trav)->info.arrival_Time == elem.info.arrival_Time) {
                newProcess->link = *trav;
                *trav = newProcess;
            } else if ((*trav) == NULL) {
                *trav = newProcess;
                Q->FRONT = newProcess;
            } else {
                if ((*trav)->info.arrival_Time > elem.info.arrival_Time) {
                    temp = *trav;
                    newProcess->link = temp->link;
                    temp->link = newProcess;
                  } else {
                    newProcess->link = *trav;
                    *trav = newProcess;
                  }

                if (newProcess->link == NULL) {
                    Q->FRONT = newProcess;
                }
            }
        }
    }
}